/**
 * sippak -- SIP command line utility.
 * Copyright (C) 2018, Stas Kobzar <staskobzar@modulis.ca>
 *
 * This file is part of sippak.
 *
 * sippak is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sippak is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with sippak.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file sippak.h
 * @brief sippak core include file
 */
#include <pjsip.h>
#include <pjlib.h>
#include <pjmedia.h>
#include <pjmedia-codec.h>

#ifndef __SIPPAK_H
#define __SIPPAK_H

#define PROJECT_NAME      "@PROJECT_NAME@"
#define PROJECT_VERSION   "@sippak_VERSION@"
#define PROJECT_URL       "@PROJECT_URL@"
#define PROJECT_AUTHOR    "@PROJECT_AUTHOR@"
#define PJSIP_VERSION     "@PJSIP_VERSION@"
#define PROJECT_BUILTTIME "@PROJECT_BUILTTIME@"
#define PROJECT_ARCH      "@CMAKE_SYSTEM_PROCESSOR@"
#define LICENSE           "GPLv3"

#define POOL_INIT 1024
#define POOL_INCR 1024

#define MAX_NS_COUNT 3 // must be less then PJ_DNS_RESOLVER_MAX_NS, 16
#define MIN_LOG_LEVEL 3 // minimum verbosity level

#define MAX_LEN_PRES_NOTE 64 // max length of presece note message

#define SIPMSG_BODY_LEN 2048

#define MSG_BODY_LEN 128

#define NUM_CODECS_AVAIL 12

#define SIPPAK_DEFAULT_RTP_PORT 4000

#define MAX_CUSTOM_HEADERS 12

#define MAX_PROXY_HEADERS 12

#define SIPPAK_ASSERT_SUCC(status, frm, args...) if(status != PJ_SUCCESS) {\
  PJ_LOG(1, (PROJECT_NAME, frm, ##args)); return status;\
}

typedef enum {
  SIPPAK_CODEC_SPEEX  = 1 << 0,
  SIPPAK_CODEC_ILBC   = 1 << 1,
  SIPPAK_CODEC_GSM    = 1 << 2,
  SIPPAK_CODEC_G711   = 1 << 3,
  SIPPAK_CODEC_G722   = 1 << 4,
  SIPPAK_CODEC_IPP    = 1 << 5, // Intel IPP
  SIPPAK_CODEC_G7221  = 1 << 6, // g722.1
  SIPPAK_CODEC_L16    = 1 << 7,
  SIPPAK_CODEC_OCAMR  = 1 << 8,
  SIPPAK_CODEC_SILK   = 1 << 9,
  SIPPAK_CODEC_OPUS   = 1 << 10,
  SIPPAK_CODEC_BCG729 = 1 << 11,
  SIPPAK_CODEC_ALL    = 1 << 12
} codec_e;

typedef enum {

  CMD_UNKNOWN = 0x100,
  CMD_HELP,
  CMD_VERSION,
  CMD_PING,
  CMD_PUBLISH,
  CMD_SUBSCRIBE,
  CMD_NOTIFY,
  CMD_REGISTER,
  CMD_REFER,
  CMD_MESSAGE,
  CMD_INVITE

} app_command;

typedef enum {

  EVTYPE_UNKNOWN = 0x200, // not set with cli opt
  EVTYPE_PRES,
  EVTYPE_MWI,
  EVTYPE_OTHER

} sippak_evtype_e;

typedef enum {

  CTYPE_UNKNOWN = 0x300, // not set with cli opt
  CTYPE_PIDF,
  CTYPE_XPIDF,
  CTYPE_MWI,
  CTYPE_OTHER

} sippak_ctype_e;

struct sippak_app {
  pjsip_endpoint *endpt;
  pj_pool_t *pool;
  pj_caching_pool *cp;

  struct {

    unsigned int cmd;             /*<! Command ID. Default CMD_PING */

    int log_level;                /*<! Log level. Default MIN_LOG_LEVEL */
    unsigned log_decor;           /*<! Log decoration: color, indent, time etc. */
    pj_bool_t trail_dot;          /*<! Display trailing dot at the end of SIP message line. */

    pj_str_t dest;                /*<! Destination R-URI */
    char *nameservers;            /*<! Comma separated list of DNS servers. */
    pj_uint16_t local_port;       /*<! Bind local port. */

    pj_str_t local_host;          /*<! Bind local IP/host. */
    pj_str_t username;            /*<! Username in Contact/From header and for auth. */
    pj_str_t password;            /*<! Authentication password. */
    pj_str_t from_name;           /*<! Display name in From header. */
    pjsip_transport_type_e proto; /*<! Transport protocol type: udp, tcp etc. */
    unsigned int expires;         /*<! Set Expires header value */

    pj_bool_t pres_status_open;   /*<! Presence status */
    pj_str_t pres_note;           /*<! Presence note message */
    sippak_evtype_e pres_ev;      /*<! Presence event type for subscribe. */
    pj_str_t event;               /*<! Event header value. */
    sippak_ctype_e ctype_e;       /*<! Content type enum value. */
    pjsip_media_type ctype_media; /*<! Content type pjsip struct. */

    pj_bool_t is_mwi;             /*<! MWI message summary presence type. */
    int mwi[4];                   /*<! Message summary body vm lise new/old (urg_new/urg_old). */
    pj_str_t mwi_acc;             /*<! Message summary account URL. */

    pj_bool_t is_clist;           /*<! Flag for REGISTER method to get contacts list. */
    pj_bool_t cancel_all_reg;     /*<! Flag for REGISTER method to cancel all registrations. */
    pj_bool_t cancel;             /*<! Flag for REGISTER method to cancel registration for contact.
                                       and cancel INVITE method in early state.
                                  */

    pj_str_t contact;             /*<! Custom contact header. */

    pj_str_t refer_to;            /*<! Refer-To header value for REFER command. */

    pj_str_t body;                /*<! MESSAGE body text. */

    struct {
      unsigned cnt;               /*<! Number of codecs to use. If set to NUM_CODECS_AVAIL, then will use all available. */
      codec_e codec[NUM_CODECS_AVAIL]; /*<! Array of ordered codecs to use. */
      pj_uint16_t rtp_port;       /*<! Bind local RTP port. */
    } media;

    pj_str_t user_agent;          /*<! User agent header value. */

    struct {
      unsigned cnt;
      pjsip_generic_string_hdr *h[MAX_CUSTOM_HEADERS];
    } hdrs;

    struct {
      unsigned cnt;
      char *p[MAX_PROXY_HEADERS];
    } proxy;                      /* Outbound proxy */

  } cfg;

};

PJ_DEF(pj_status_t) sippak_mod_sip_mangler_register (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_mod_logger_register (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_set_resolver_ns (struct sippak_app *app);

PJ_DEF(pj_status_t) sippak_cmd_ping (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_publish(struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_subscribe (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_notify (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_register (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_refer (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_message (struct sippak_app *app);
PJ_DEF(pj_status_t) sippak_cmd_invite (struct sippak_app *app);

PJ_DEF(pj_status_t) sippak_getopts(int argc, char *argv[], struct sippak_app *app);

PJ_DEF(pj_status_t) sippak_init (struct sippak_app *app);
PJ_DEF(void) sippak_loop_cancel();
PJ_DEF(void) usage ();
PJ_DEF(void) version ();

/* sip helper function */
PJ_DEF(pj_str_t) sippak_create_from_hdr(struct sippak_app *app);
PJ_DEF(pj_str_t) sippak_create_ruri(struct sippak_app *app);
/**
 * Register Request-URI respecting rfc3261 section 10.2.
 * The "userinfo" and "@" components of the
 * SIP URI MUST NOT be present.
 *
 * @param app      sippak main application structure.
 * @return         pj_str Request RURI
 */
PJ_DEF(pj_str_t) sippak_create_reg_ruri(struct sippak_app *app);
PJ_DEF(pj_str_t) sippak_create_contact_hdr(struct sippak_app *app,
                                pj_str_t *local_addr,
                                int local_port);

PJ_DEF(pj_status_t) sippak_transport_init(struct sippak_app *app,
                                  pj_str_t **local_addr,
                                  int *local_port);

PJ_DEF(void) sippak_set_cred(struct sippak_app *app, pjsip_cred_info *cred);

/**
 * Get name servers and ports list and store in "ns" and "ports" arrays.
 * If "nameservers" argument is NULL, will try to get system nameserves
 * using "resolv" library. First argument, "nameservers", should contain
 * string of servers (and ports, optionally) of the form:
 * "8.8.8.8,127.0.0.1" or "8.8.4.1:553" or "8.8.4.4,6.6.6.1:887"
 *
 * @param app      sippak main application structure.
 * @param ns       Array where servers will by stored as pj_str_t
 * @param ports    Array of ports corresponding to the servers. Default 53.
 *
 * @return              Number of found servers or 0.
 */
PJ_DEF(int) sippak_get_ns_list (struct sippak_app *app, pj_str_t *ns, pj_uint16_t *ports);

/**
 * Detect if pjsip built supports given codec.
 *
 * @param codec   Codec id
 *
 * @return    PJ_TRUE if supported.
 */
PJ_DEF(pj_bool_t) sippak_support_codec (codec_e codec);

/**
 * Parse codecs comma separated string and set config array.
 *
 * @param codecs    String of comma separated codecs.
 * @param app       Sippak application structure.
 *
 * @return          PJ_SUCCESS status on success or PJ_EINVAL if
 *                  codec invalid or not supported.
 */
PJ_DEF(pj_status_t) sippak_set_media_codecs_cfg (char *codecs, struct sippak_app *app);

/**
 * Set media SDP with configured codecs.
 *
 * @param app       Sippak application.
 * @param sdp       pjmedia sdp struct to set.
 *
 * @return          PJ_SUCCESS on success
 */
PJ_DEF(pj_status_t) sippak_set_media_sdp(struct sippak_app *app, pjmedia_sdp_session **sdp);

/**
 * Add SIP headers set by cli options. User-Agent and custom headers.
 *
 * @param tdata     Transaction data structure.
 * @param app       Sippak application.
 * @return          void
 */
PJ_DEF(void) sippak_add_sip_headers (pjsip_tx_data *tdata, struct sippak_app *app);

/**
 * Set proxies list.
 *
 * @param dlg       PJSIP dialog instance
 * @param list      Route set
 * @return          PJ_TRUE if set
 */
PJ_DEF(pj_bool_t) sippak_set_proxies_list(struct sippak_app *app, pjsip_route_hdr **route_set);

#endif
